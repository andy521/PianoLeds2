#!python

# MIT License
#
# Copyright (C) 2017 Daniel Schenk <danielschenk@users.noreply.github.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import os
import components

# Create base environment
Import('base_env')
env = base_env.Clone()

# Install the components module
components.install(env)

symbols = [
    ('ENABLE_LOG_ERROR', 1),
    ('ENABLE_LOG_WARNING', 1),
    ('ENABLE_LOG_INFO', 1),
    ('ENABLE_LOG_DEBUG', 1),
]
flags = [
    '-Wall',
    '-std=c++11',
    '-O2',
    '-g3',
    '-fdata-sections',
    '-ffunction-sections',
]
link_flags = [
    '-Wl,-dead_strip',
]

env.Append(CDEFINES=symbols)
env.Append(CPPDEFINES=symbols)
env.Append(CFLAGS=flags)
env.Append(CXXFLAGS=flags)
env.Append(LINKFLAGS=link_flags)
env.Append(CPPPATH=[
    '#',
    '#/ExternalComponents/googletest/googletest/include',
    '#/ExternalComponents/googletest/googlemock/include',
    '#/ExternalComponents/json11',
])

SConscript('ExternalComponents/json11.scons', exports={'base_env': env}, duplicate=False)
SConscript('ExternalComponents/GoogleTest.scons', exports={'base_env': env}, duplicate=False)

SConscript('Common/Common.scons', exports={'base_env': env}, duplicate=False)
SConscript('Processing/Processing.scons', exports={'base_env': env}, duplicate=False)

AddOption('--memcheck', action='store_true')
AddOption('--gtest_filter')

test_env = env.Clone()
sources = []
components_with_test = ['Processing', 'Common']
for component in components_with_test:
    sources += Glob(component + '/Test/*.cpp')

components_to_get = components_with_test + ['GoogleTest']
test_program = test_env.Program('Test', sources + env.GetComponents(*components_to_get))

prefix = ''
suffix = ''

if GetOption('memcheck'):
    prefix += 'valgrind --leak-check=yes '

gtest_filter = GetOption('gtest_filter')
if gtest_filter is not None:
    suffix += ' --gtest_filter=' + gtest_filter

test_result = test_env.Command('TestResult.xml', test_program, '{}./$SOURCE --gtest_output=xml:$TARGET{}'.format(prefix, suffix))
test_env.AlwaysBuild(test_result)
