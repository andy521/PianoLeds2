#!python

# Copyright (C) 2017 Daniel Schenk <danielschenk@users.noreply.github.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import components

# Create base environment
Import('base_env')
env = base_env.Clone()

Export(base_env=env)

# Install the components module
components.install(env)

symbols = [
    ('ENABLE_LOG_ERROR', 1),
    ('ENABLE_LOG_WARNING', 1),
    ('ENABLE_LOG_INFO', 1),
    ('ENABLE_LOG_DEBUG', 1),
]
flags = [
    '-Wall',
    '-std=c++11',
    '-O2',
    '-g3',
    '-fdata-sections',
    '-ffunction-sections',
]
link_flags = [
    '-Wl,-dead_strip',
]

env.Append(CDEFINES=symbols)
env.Append(CPPDEFINES=symbols)
env.Append(CFLAGS=flags)
env.Append(CXXFLAGS=flags)
env.Append(LINKFLAGS=link_flags)
env.Append(CPPPATH=[
    '#',
    '#/ExternalComponents/googletest/googletest/include',
    '#/ExternalComponents/googletest/googlemock/include',
])

SConscript('ExternalComponents/GoogleTest.scons', duplicate=False)

SConscript('Common/Common.scons', duplicate=False)
SConscript('Processing/Processing.scons', duplicate=False)

AddOption('--memcheck', action='store_true')

test_env = env.Clone()
sources = []
components_with_test = ['Processing', 'Common']
for component in components_with_test:
    sources += Glob(component + '/Test/*.cpp')

components_to_get = components_with_test + ['GoogleTest']
test_program = test_env.Program('Test', sources + env.GetComponents(*components_to_get))

if GetOption('memcheck'):
    prefix = 'valgrind --leak-check=yes '
else:
    prefix = ''
test_result = test_env.Command('TestResult.xml', test_program, '{}./$SOURCE --gtest_output=xml:$TARGET'.format(prefix))
test_env.AlwaysBuild(test_result)
