/**
 * @file
 *
 * MIT License
 * 
 * @copyright (c) 2018 Daniel Schenk <danielschenk@users.noreply.github.com>
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * @brief std::mutex implementation which uses FreeRTOS
 */

#include "freertos/FreeRTOS.h"
#include "freertos/semphr.h"

#ifndef MUTEX
#define MUTEX

namespace std
{
    template <typename factory>
    class _mutex_base
    {
    public:
        _mutex_base()
        {
            factory f;
            m_handle = f.create_mutex();
        }

        ~_mutex_base()
        {
            vSemaphoreDelete(m_handle);
        }

        _mutex_base(const _mutex_base&) = delete;
        _mutex_base& operator=(const _mutex_base&) = delete;

        void lock()
        {
            xSemaphoreTake(m_handle, portMAX_DELAY);
        }

        void unlock()
        {
            xSemaphoreGive(m_handle);
        }

    private:
        xSemaphoreHandle m_handle;
    };

    class _mutex_factory
    {
    public:
        static xSemaphoreHandle create_mutex()
        {
            return xSemaphoreCreateMutex();
        }
    };

    class _recursive_mutex_factory
    {
    public:
        static xSemaphoreHandle create_mutex()
        {
            return xSemaphoreCreateRecursiveMutex();
        }
    };

    typedef _mutex_base<_mutex_factory> mutex;
    typedef _mutex_base<_recursive_mutex_factory> recursive_mutex;

    template <typename mutex>
    class lock_guard
    {
    public:
        lock_guard(mutex& m)
            : m_mutex(m)
        {
            m_mutex.lock();
        }

        ~lock_guard()
        {
            m_mutex.unlock();
        }

        lock_guard() = delete;
        lock_guard(const lock_guard&) = delete;
        lock_guard& operator=(const lock_guard&) = delete;
    
    private:
        mutex& m_mutex;
    };
}

#endif // MUTEX
